# 2 "lexer.mll"
 
  open Parser

  module X = Lexing
  module L = Syntax.Location

  let unterminated_comment loc =
    raise (Syntax.ParseError (loc, Some "unterminated comment"))

  let invalid_char loc (c : char) =
    let msg = Printf.sprintf "invalid char: `%c'" c in
    raise (Syntax.ParseError (loc, Some msg))

  let newline lexbuf =
    let lcp = lexbuf.X.lex_curr_p in
    lexbuf.X.lex_curr_p <- { lcp with
      X.pos_lnum = lcp.X.pos_lnum + 1;
      X.pos_bol  = lcp.X.pos_cnum;
    }

  (* ------------------------------------------------------------------ *)
  exception LexicalError of L.t option * string

  (* ------------------------------------------------------------------ *)
  let lex_error lexbuf msg =
    raise (LexicalError (Some (L.of_lexbuf lexbuf), msg))

  (* ------------------------------------------------------------------ *)
  let _keywords = [
    "bool"   , BOOL   ;
    "else"   , ELSE   ;
    "false"  , FALSE  ;
    "if"     , IF     ;
    "int"    , INT    ;
    "return" , RETURN ;
    "true"   , TRUE   ;
    "void"   , VOID   ;
    "while"  , WHILE  ;
    "print"  , PRINT  ;
  ]

  (* ------------------------------------------------------------------ *)
  let keywords =
    let keywords = Hashtbl.create 0 in
    List.iter (fun (k, v) -> Hashtbl.add keywords k v) _keywords;
    keywords

# 50 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\229\255\230\255\001\000\002\000\234\255\235\255\236\255\
    \002\000\003\000\030\000\242\255\243\255\244\255\245\255\246\255\
    \247\255\248\255\011\000\079\000\089\000\113\000\002\000\255\255\
    \192\000\215\000\017\000\249\255\250\255\241\255\238\255\237\255\
    \232\255\231\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\026\000\026\000\255\255\255\255\255\255\
    \016\000\015\000\026\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\003\000\003\000\002\000\001\000\255\255\
    \255\255\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\023\000\022\000\000\000\022\000\000\000\022\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\028\000\000\000\000\000\000\000\000\000\
    \022\000\010\000\022\000\000\000\000\000\000\000\003\000\033\000\
    \017\000\016\000\005\000\007\000\013\000\006\000\000\000\018\000\
    \020\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\026\000\012\000\009\000\011\000\008\000\031\000\
    \030\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\029\000\000\000\000\000\000\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\015\000\004\000\014\000\032\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \021\000\024\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
    \000\000\025\000\025\000\025\000\025\000\025\000\025\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\255\255\000\000\255\255\022\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\026\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\022\000\255\255\255\255\255\255\000\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\018\000\000\000\000\000\000\000\000\000\008\000\
    \009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\004\000\019\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\255\255\
    \021\000\020\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\255\255\255\255\255\255\255\255\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\026\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000\025\000\025\000\025\000\025\000\025\000\255\255\255\255\
    \255\255\024\000\024\000\024\000\024\000\024\000\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \025\000\025\000\025\000\025\000\025\000\025\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec main lexbuf =
    __ocaml_lex_main_rec lexbuf 0
and __ocaml_lex_main_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 64 "lexer.mll"
                  ( newline lexbuf; main lexbuf )
# 213 "lexer.ml"

  | 1 ->
# 65 "lexer.mll"
                  ( main lexbuf )
# 218 "lexer.ml"

  | 2 ->
let
# 66 "lexer.mll"
             id
# 224 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "lexer.mll"
                  ( try Hashtbl.find keywords id with Not_found -> IDENT id )
# 228 "lexer.ml"

  | 3 ->
let
# 67 "lexer.mll"
              num
# 234 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "lexer.mll"
                  ( INT64 (Int64.of_string num) )
# 238 "lexer.ml"

  | 4 ->
let
# 69 "lexer.mll"
                      num
# 244 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
      ( INT64 (Int64.of_string num) )
# 248 "lexer.ml"

  | 5 ->
# 72 "lexer.mll"
                          ( newline lexbuf; main lexbuf )
# 253 "lexer.ml"

  | 6 ->
# 73 "lexer.mll"
                          ( main lexbuf )
# 258 "lexer.ml"

  | 7 ->
# 75 "lexer.mll"
         ( LPAREN    )
# 263 "lexer.ml"

  | 8 ->
# 76 "lexer.mll"
         ( RPAREN    )
# 268 "lexer.ml"

  | 9 ->
# 77 "lexer.mll"
         ( LBRACE    )
# 273 "lexer.ml"

  | 10 ->
# 78 "lexer.mll"
         ( RBRACE    )
# 278 "lexer.ml"

  | 11 ->
# 79 "lexer.mll"
         ( COMMA     )
# 283 "lexer.ml"

  | 12 ->
# 80 "lexer.mll"
         ( SEMICOLON )
# 288 "lexer.ml"

  | 13 ->
# 81 "lexer.mll"
         ( EQ        )
# 293 "lexer.ml"

  | 14 ->
# 82 "lexer.mll"
         ( BANGEQ    )
# 298 "lexer.ml"

  | 15 ->
# 83 "lexer.mll"
         ( LT        )
# 303 "lexer.ml"

  | 16 ->
# 84 "lexer.mll"
         ( GT        )
# 308 "lexer.ml"

  | 17 ->
# 85 "lexer.mll"
         ( LE        )
# 313 "lexer.ml"

  | 18 ->
# 86 "lexer.mll"
         ( GE        )
# 318 "lexer.ml"

  | 19 ->
# 87 "lexer.mll"
         ( PLUS      )
# 323 "lexer.ml"

  | 20 ->
# 88 "lexer.mll"
         ( MINUS     )
# 328 "lexer.ml"

  | 21 ->
# 89 "lexer.mll"
         ( STAR      )
# 333 "lexer.ml"

  | 22 ->
# 90 "lexer.mll"
         ( SLASH     )
# 338 "lexer.ml"

  | 23 ->
# 91 "lexer.mll"
         ( PIPEPIPE  )
# 343 "lexer.ml"

  | 24 ->
# 92 "lexer.mll"
         ( AMPAMP    )
# 348 "lexer.ml"

  | 25 ->
# 94 "lexer.mll"
        ( EOF )
# 353 "lexer.ml"

  | 26 ->
let
# 96 "lexer.mll"
         c
# 359 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 96 "lexer.mll"
            ( invalid_char (L.of_lexbuf lexbuf) c )
# 363 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_main_rec lexbuf __ocaml_lex_state

;;

